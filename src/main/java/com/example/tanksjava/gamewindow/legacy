package com.example.tanksjava.gamewindow;

import com.example.tanksjava.toolsmethods.StaticToolsAndHandlers;
import javafx.animation.AnimationTimer;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.paint.Color;

import java.nio.file.Paths;


public class GameViewController {
    @FXML
    public AnchorPane newGamePane;

    @FXML
    public ImageView playerTank;

    private int currentRotation=180;

    private MediaPlayer backgroundMusic;
    private MediaPlayer tanksoundMusic;

    public AnimationTimer gameLoop;


   private int playerStartingPosX =448;
   private int playerStartingPosY =488;

    private final String gameBoardURLString="com/example/tanksjava/gameWindowResources/tankGameMap.png";
    private final String backGroundMusicURLString= "src/main/resources/com/example/tanksjava/gameWindowResources/music.mp3";
    private final String tankSoundULRString="src/main/resources/com/example/tanksjava/gameWindowResources/loop_2.wav";

    Image tankImage = new Image("com/example/tanksjava/gameWindowResources/tank_bigRed.png");
    @FXML
    private void initialize(){
        newGamePane.setBackground(new Background(new BackgroundFill(Color.BLACK,null,null)));
        movingPlayerTank();
        tools.setBackGround(newGamePane,gameBoardURLString,800,800);

        backgroundMusic = new MediaPlayer(new Media(Paths.get(backGroundMusicURLString).toUri().toString()));
        tanksoundMusic = new MediaPlayer(new Media(Paths.get(tankSoundULRString).toUri().toString()));

        backGroundMusic(backgroundMusic,true);
        startGameLoop();


    }


    public void movingPlayerTank(){


        Button button=new Button();
        button.setVisible(true);
        newGamePane.getChildren().add(button);

        playerTank=new ImageView(tankImage);
        newGamePane.getChildren().add(playerTank);
        playerTank.setLayoutX(playerStartingPosX);
        playerTank.setLayoutY(playerStartingPosY);
        playerTank.setRotate(currentRotation);
        PlayerController  pc=new PlayerController(playerStartingPosX, playerStartingPosY);

           newGamePane.setOnKeyTyped(new EventHandler<KeyEvent>() {
               @Override
               public void handle(KeyEvent event) {

                   tankEngineSoundHandler();
                   char input=event.getCharacter().charAt(0);
                   tankPositionAndOrientationUpdater(pc,input);
               }
           });
    }

    public void backGroundMusic(MediaPlayer controller, boolean isLooped){
        if(!tanksoundMusic.getStatus().equals(MediaPlayer.Status.PLAYING)){
            if (isLooped){
                controller.setCycleCount(MediaPlayer.INDEFINITE);
            }
            controller.setVolume(0.05);
            controller.play();
        }
    }

    public void tankEngineSoundHandler(){
        backGroundMusic(tanksoundMusic ,false);
        tanksoundMusic.setOnEndOfMedia(new Runnable() {
            @Override
            public void run() {
                tanksoundMusic.stop();
            }
        });
        if (tanksoundMusic.getStatus().equals(MediaPlayer.Status.STOPPED)){
            tanksoundMusic.play();
        }

        System.out.println(tanksoundMusic.getStatus());
    }

    public void tankPositionAndOrientationUpdater(PlayerController pc,char input){

        pc.updatePlayerCurrentPosition(input);
        pc.playerRotation(input);
        playerTank.setRotate(pc.getPlayerRotation());
        playerTank.setLayoutY(pc.getCurrentPositionY());
        playerTank.setLayoutX(pc.getCurrentPositionX());
        System.out.println(pc.getCurrentPositionX());
        System.out.println(pc.getCurrentPositionY());
        System.out.println(playerTank.getRotate());
    }

    public void startGameLoop(){
        gameLoop =new AnimationTimer() {
            @Override
            public void handle(long now) {

            }
        };
        gameLoop.start();
    }

}



  public void printObjectCorners(PlayerController object){


        int x=object.getCurrentPositionX();
        int y=object.getCurrentPositionY();

        int flagValue=gameBoardHitBoxArray[y][x];
        int flagValuePlusSize=gameBoardHitBoxArray[y][x+object.getObjectSizeX()-1];

        int xPlusSize=object.getCurrentPositionX()+object.getObjectSizeX()-1;
        int yPlusSize=object.getCurrentPositionY()+object.getObjectSizeY()-1;

        int of1flagValue=gameBoardHitBoxArray[y][x-1];
        int of1flagValuePlusSize=gameBoardHitBoxArray[y][xPlusSize+1];

        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("printing each corner of object:");
        System.out.println("         x-1="+(x-1)+"                             "+("x+1="+(xPlusSize+1)));
        System.out.println("y="+(y)+"|flagVal-1:"+of1flagValue+"|                     |flagVal+1:"+of1flagValuePlusSize+("|y="+(y)));
        System.out.println("___________________________________________________________________________");
        System.out.println("                x="+x+"                   "+("x="+xPlusSize));
        System.out.println("          y="+y+"|flagVal:"+flagValue+"|           |flagVal:"+flagValuePlusSize+("|y="+y));
        System.out.println();
        System.out.println();
        System.out.println();

        flagValue=gameBoardHitBoxArray[yPlusSize-1][x];
        flagValuePlusSize=gameBoardHitBoxArray[yPlusSize-1][xPlusSize-1];

        of1flagValue=gameBoardHitBoxArray[yPlusSize][x-1];
        of1flagValuePlusSize=gameBoardHitBoxArray[yPlusSize][xPlusSize+1];

        System.out.println("          y="+yPlusSize+"|flagVal:"+flagValue+"|           |flagVal:"+flagValuePlusSize+("|y="+yPlusSize));
        System.out.println("                x="+x+"                   "+("x="+xPlusSize));
        System.out.println("___________________________________________________________________________");
        System.out.println("y="+(yPlusSize)+"|flagVal-1:"+of1flagValue+"|                     |flagVal+1:"+of1flagValuePlusSize+("|y="+(yPlusSize)));
        System.out.println("         x-1="+(x+1)+"                             "+("x+1="+(xPlusSize+1)));
    }



switch (direction){
            case 'w':
                for (int i=playerObject.getCurrentPositionX();i<playerObject.getCurrentPositionX()+ playerObject.getObjectSizeX();i++){
                        if (gameBoardHitBoxArray[playerObject.getCurrentPositionY()-speed][i]== collideFlag){
                            //need to fill new speed
                            return outPutSpeed;
                        }
                }
                break;
            case 's':
                for (int i=playerObject.getCurrentPositionX();i<playerObject.getCurrentPositionX()+ playerObject.getObjectSizeX();i++){
                    if (gameBoardHitBoxArray[playerObject.getCurrentPositionY()+ playerObject.getObjectSizeY()+speed][i]== collideFlag){
                        //need to fill new speed
                          return outPutSpeed;
                    }
                }
                break;

            case 'a':
                for (int i=playerObject.getCurrentPositionY();i<playerObject.getCurrentPositionY()+ playerObject.getObjectSizeY();i++){
                    if (gameBoardHitBoxArray[i][playerObject.getCurrentPositionX()-speed]== collideFlag){
                        //need to fill new speed
                        return outPutSpeed;
                    }
                }

                break;
            case 'd':
                for (int i=playerObject.getCurrentPositionY();i<playerObject.getCurrentPositionY()+ playerObject.getObjectSizeY();i++){
                    if (gameBoardHitBoxArray[i][playerObject.getCurrentPositionX()+ playerObject.getObjectSizeX()+speed]== collideFlag){

                        for (int k = startingPointX; i< collisionPointX; i++){
                            if(gameBoardHitBoxArray[i][startingPointX +step]== collideFlag){
                                return step;
                            }
                            step++;
                        }
                        return outPutSpeed;
                    }
                }
                break;
